name: Cross-Platform Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  BINARY_NAME: mock-exporter
  VERSION: ${{ github.ref }}


jobs:
  build:
    strategy:
      matrix:
        os: [windows, linux, macos]
        arch: [amd64]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21.3

      - name: Build for ${{ matrix.os }}
        run: |
          GOOS=${{ matrix.os }}
          GOARCH=${{ matrix.arch }}
          CGO_ENABLED=0
          OUTPUT_BINARY="${BINARY_NAME}-${VERSION}-${GOOS}-${GOARCH}"
          go build -trimpath -ldflags "-X github.com/prometheus/common/version.Version=${VERSION} ...other ldflags..." -o "${OUTPUT_BINARY}" -v .

      - name: Create Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${BINARY_NAME}-${{ env.VERSION }}-${{ matrix.os }}-${{ matrix.arch }}.exe
          asset_name: ${BINARY_NAME}-${VERSION}-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (Linux)
        if: matrix.os == 'linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${BINARY_NAME}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}
          asset_name: ${BINARY_NAME}-${VERSION}-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (macOS)
        if: matrix.os == 'macos'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${BINARY_NAME}-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}
          asset_name: ${BINARY_NAME}-${VERSION}-darwin-amd64
          asset_content_type: application/octet-stream
